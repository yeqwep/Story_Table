--フェード終了関数
local function fade_done(self,node)
    msg.post('/s_common/scenario#scenario', 'fade_done')
end
-- 最初に実行する関数
function init(self)
    local color = vmath.vector4(0, 0, 0, 0) -- 色の設定　（黒色、透明）
    local width, height = gui.get_width(), gui.get_height() -- GUIの縦横幅
    local position = vmath.vector3(width / 2, height / 2, 0) -- 位置
    local size = vmath.vector3(width * 1, height * 1, 0) -- 大きさ
    local shade = gui.new_box_node(position, size) -- フェード用の四角作成
    gui.set_render_order(15) --GUIレイヤーの前後
    gui.set_adjust_mode(shade, gui.ADJUST_ZOOM) --アジャストモード　ウィンドウの大きさに合わせてズームする
    gui.set_color(shade, color) --フェード用の四角の色を設定
    -- フェード用の四角をupdateとかで使えるようにself.shadeに入れる
    self.shade = shade
end

--msg.postを受信した時発生する関数
function on_message(self, message_id, message, sender)
    local timer = message.timer
    if timer == 0 then
        timer = 0.2
    end
    -- hash("fade_out")を受信したらフェードアウト開始
    if message_id == hash('fade_out') then
        print('FADE_OUT timer:'.. timer)
        gui.set_color(self.shade, vmath.vector4(0, 0, 0, 0))
        gui.animate(
            self.shade,
            gui.PROP_COLOR,
            vmath.vector4(0, 0, 0, 1),
            gui.EASING_INOUTQUAD,
            timer,
            0.0,
            fade_done
        )
    elseif message_id == hash('fade_in') then
        print('FADE_IN timer:'.. timer)
        gui.set_color(self.shade, vmath.vector4(0, 0, 0, 1))
        gui.animate(
            self.shade,
            gui.PROP_COLOR,
            vmath.vector4(0, 0, 0, 0),
            gui.EASING_INOUTQUAD,
            timer,
            0.0,
            fade_done
        )
    end
end